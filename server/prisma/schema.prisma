// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  recipes       Recipe[]
  shoppingLists ShoppingList[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([email])
}

model Recipe {
  id               String             @id @default(uuid())
  title           String
  description     String?
  instructions    String
  imageUrl        String?
  userId          String?
  user            User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients     RecipeIngredient[]
  categories     RecipeCategory[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([userId])
  @@index([title])
}

model Ingredient {
  id               String             @id @default(uuid())
  name             String             @unique
  recipes          RecipeIngredient[]
  shoppingListItems ShoppingListItem[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([name])
}

model RecipeIngredient {
  id           String     @id @default(uuid())
  recipeId     String
  ingredientId String
  quantity     Float
  unit         String
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([recipeId])
  @@index([ingredientId])
}

model Category {
  id      String           @id @default(uuid())
  name    String           @unique
  recipes RecipeCategory[]

  @@index([name])
}

model RecipeCategory {
  id         String   @id @default(uuid())
  recipeId   String
  categoryId String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@index([categoryId])
}

model ShoppingList {
  id        String             @id @default(uuid())
  name      String
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     ShoppingListItem[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([userId])
}

model ShoppingListItem {
  id             String       @id @default(uuid())
  shoppingListId String
  ingredientId   String
  quantity       Float
  unit           String
  purchased      Boolean      @default(false)
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)
  ingredient     Ingredient   @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([shoppingListId])
  @@index([ingredientId])
}

// Rest of your schema will go here
